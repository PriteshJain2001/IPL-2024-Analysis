{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyPlKbXkcMD2FLHFy8DJFBu1",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/PriteshJain2001/IPL-2024-Analysis/blob/main/Sentiment%20Analysis\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "P8nBrQXQNwT4",
        "outputId": "c2cc6cd6-62fe-46c6-8626-c01ea40a99db"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m10.0/10.0 MB\u001b[0m \u001b[31m56.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m6.9/6.9 MB\u001b[0m \u001b[31m108.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25h"
          ]
        }
      ],
      "source": [
        "# Colab install cell (run with ! prefix in Colab)\n",
        "!pip install -q pandas numpy scikit-learn matplotlib seaborn openpyxl nltk xgboost joblib streamlit gradio sentencepiece transformers datasets torch tensorflow\n",
        "# sentencepiece and transformers may be heavy; that's OK in Colab.\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Cell 1: imports\n",
        "import os\n",
        "import re\n",
        "import math\n",
        "import random\n",
        "import joblib\n",
        "import itertools\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "\n",
        "from sklearn.model_selection import train_test_split, GridSearchCV\n",
        "from sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer\n",
        "from sklearn.pipeline import Pipeline\n",
        "from sklearn.metrics import classification_report, confusion_matrix, accuracy_score\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.naive_bayes import MultinomialNB\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "import xgboost as xgb\n",
        "\n",
        "import nltk\n",
        "nltk.download('stopwords')\n",
        "from nltk.corpus import stopwords\n",
        "STOPWORDS = set(stopwords.words('english'))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Xu9zqol8OIsV",
        "outputId": "b662dab3-c3ec-4c85-8e09-87cf10466ae6"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "[nltk_data] Downloading package stopwords to /root/nltk_data...\n",
            "[nltk_data]   Unzipping corpora/stopwords.zip.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Cell 2: load data - make sure the file is in the working directory or upload it in Colab\n",
        "DATA_PATH = \"social_media_sentiment.xlsx\"   # change path if needed\n",
        "df = pd.read_excel(DATA_PATH)\n",
        "print(\"Rows:\", len(df))\n",
        "df.sample(5)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 224
        },
        "id": "5TyqulJvOgIE",
        "outputId": "9636f92e-d0e6-4c4c-bff5-d44078585a00"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Rows: 999\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                                           text sentiment\n",
              "797             I am going to the market later.   Neutral\n",
              "707            Just another normal day at work.   Neutral\n",
              "937     Terrible update, nothing works anymore.  Negative\n",
              "34   Very bad app, keeps crashing all the time.  Negative\n",
              "829     The service was terrible and very slow.  Negative"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-fae9fa62-99e6-4898-9506-2f284c1c464c\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>text</th>\n",
              "      <th>sentiment</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>797</th>\n",
              "      <td>I am going to the market later.</td>\n",
              "      <td>Neutral</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>707</th>\n",
              "      <td>Just another normal day at work.</td>\n",
              "      <td>Neutral</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>937</th>\n",
              "      <td>Terrible update, nothing works anymore.</td>\n",
              "      <td>Negative</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>34</th>\n",
              "      <td>Very bad app, keeps crashing all the time.</td>\n",
              "      <td>Negative</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>829</th>\n",
              "      <td>The service was terrible and very slow.</td>\n",
              "      <td>Negative</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-fae9fa62-99e6-4898-9506-2f284c1c464c')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-fae9fa62-99e6-4898-9506-2f284c1c464c button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-fae9fa62-99e6-4898-9506-2f284c1c464c');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-ac1548e5-1340-47b7-9bfb-f5a1f0acd70e\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-ac1548e5-1340-47b7-9bfb-f5a1f0acd70e')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-ac1548e5-1340-47b7-9bfb-f5a1f0acd70e button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"text\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"Just another normal day at work.\",\n          \"The service was terrible and very slow.\",\n          \"Terrible update, nothing works anymore.\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sentiment\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Negative\",\n          \"Neutral\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 3
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df['sentiment'] = df['sentiment'].str.strip().str.capitalize()\n",
        "df['sentiment'].value_counts()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 210
        },
        "id": "25vVk8F2OmEV",
        "outputId": "49b55724-9f3c-4338-c61a-994b6dcf5324"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "sentiment\n",
              "Positive    333\n",
              "Negative    333\n",
              "Neutral     333\n",
              "Name: count, dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>count</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>sentiment</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Positive</th>\n",
              "      <td>333</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Negative</th>\n",
              "      <td>333</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Neutral</th>\n",
              "      <td>333</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Cell 3: text cleaning\n",
        "import html\n",
        "def clean_text(text):\n",
        "    if pd.isna(text):\n",
        "        return \"\"\n",
        "    text = str(text)\n",
        "    text = html.unescape(text)           # convert HTML entities\n",
        "    text = text.lower()\n",
        "    text = re.sub(r\"http\\S+|www\\S+|https\\S+\", \"\", text)  # remove urls\n",
        "    text = re.sub(r\"@\\w+\", \"\", text)     # remove mentions\n",
        "    text = re.sub(r\"#\", \"\", text)        # remove hashtag symbol but keep the word\n",
        "    text = re.sub(r\"[^a-z\\s]\", \" \", text) # remove non-letters\n",
        "    text = re.sub(r\"\\s+\", \" \", text).strip()\n",
        "    # remove stopwords\n",
        "    tokens = [w for w in text.split() if w not in STOPWORDS]\n",
        "    return \" \".join(tokens)\n",
        "\n",
        "# apply\n",
        "df['clean_text'] = df['text'].apply(clean_text)\n",
        "df.head()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 276
        },
        "id": "JgAGDfTMOpLD",
        "outputId": "0a1c35c0-e2aa-449a-c88d-c6547a448507"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                                               text sentiment  \\\n",
              "0   The movie was fantastic, had such a great time!  Positive   \n",
              "1  This product is the worst thing I bought online.  Negative   \n",
              "2                  Finished my lunch, back to work.   Neutral   \n",
              "3     Loved the concert last night, best band ever!  Positive   \n",
              "4      Food was cold and tasteless, waste of money.  Negative   \n",
              "\n",
              "                                clean_text  \n",
              "0               movie fantastic great time  \n",
              "1        product worst thing bought online  \n",
              "2                 finished lunch back work  \n",
              "3  loved concert last night best band ever  \n",
              "4          food cold tasteless waste money  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-9135a906-2067-4d98-9b0e-768be7c034f1\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>text</th>\n",
              "      <th>sentiment</th>\n",
              "      <th>clean_text</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>The movie was fantastic, had such a great time!</td>\n",
              "      <td>Positive</td>\n",
              "      <td>movie fantastic great time</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>This product is the worst thing I bought online.</td>\n",
              "      <td>Negative</td>\n",
              "      <td>product worst thing bought online</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Finished my lunch, back to work.</td>\n",
              "      <td>Neutral</td>\n",
              "      <td>finished lunch back work</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Loved the concert last night, best band ever!</td>\n",
              "      <td>Positive</td>\n",
              "      <td>loved concert last night best band ever</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Food was cold and tasteless, waste of money.</td>\n",
              "      <td>Negative</td>\n",
              "      <td>food cold tasteless waste money</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9135a906-2067-4d98-9b0e-768be7c034f1')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-9135a906-2067-4d98-9b0e-768be7c034f1 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-9135a906-2067-4d98-9b0e-768be7c034f1');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-686133dc-3db1-42e8-80c6-ca5e7a47f68b\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-686133dc-3db1-42e8-80c6-ca5e7a47f68b')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-686133dc-3db1-42e8-80c6-ca5e7a47f68b button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 999,\n  \"fields\": [\n    {\n      \"column\": \"text\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 30,\n        \"samples\": [\n          \"Weather seems fine today.\",\n          \"Customer support was rude and unhelpful.\",\n          \"Just another normal day at work.\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sentiment\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Positive\",\n          \"Negative\",\n          \"Neutral\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"clean_text\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 30,\n        \"samples\": [\n          \"weather seems fine today\",\n          \"customer support rude unhelpful\",\n          \"another normal day work\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Cell 4: EDA\n",
        "print(df['sentiment'].value_counts())\n",
        "sns.countplot(x='sentiment', data=df)\n",
        "plt.title(\"Sentiment Distribution\")\n",
        "plt.show()\n",
        "\n",
        "# length distribution\n",
        "df['length'] = df['clean_text'].apply(lambda x: len(x.split()))\n",
        "df.boxplot(column='length', by='sentiment', grid=False)\n",
        "plt.suptitle('')\n",
        "plt.title('Text length by sentiment')\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "2IRbyVqiOtAI",
        "outputId": "470892cb-1cc4-4ec9-80f8-b00fc1b043b3"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "sentiment\n",
            "Positive    333\n",
            "Negative    333\n",
            "Neutral     333\n",
            "Name: count, dtype: int64\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAjMAAAG9CAYAAADgAPf3AAAAOnRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjEwLjAsIGh0dHBzOi8vbWF0cGxvdGxpYi5vcmcvlHJYcgAAAAlwSFlzAAAPYQAAD2EBqD+naQAAPDFJREFUeJzt3XlclWX+//H3UeSwIxmKCyITKi64kaNgjVkqmjXaYmYWWi7ZaGq2DX37fpMsyRq3slxnNLexzFzGNEUTm8ImNTW1XHAJF9AyFNE8Kly/P/x5xhOLHATx1tfz8TiPuq9zXff1uQ+3N2/uc59z24wxRgAAABZVobwLAAAAuBqEGQAAYGmEGQAAYGmEGQAAYGmEGQAAYGmEGQAAYGmEGQAAYGmEGQAAYGmEGQAAYGmEGcACZs6cKZvNpgMHDpR3KUU6cOCAbDab/va3v5Vo/KXt3LhxYylXdn3r06eP6tSpU95lAJZFmAEk2Wy2Yj1SUlJKZb4jR45oxIgR2rJlS6ms71pbvny5RowYUd5lWIrVf+ZnzpzRiBEjSu3fAFCaPMq7AOB6MHv2bJflWbNmKTk5OV97gwYNSmW+I0eOKDExUXXq1FGzZs1KZZ3X0vLly/X+++8TaNxQ1M982rRpysvLK5/CiunMmTNKTEyUJN11113lWwzwO4QZQNLjjz/usvzNN98oOTk5XztQFipVqlTeJQCWxttMQDHl5eVp/PjxatSokby8vFStWjU9/fTTysrKcvZ57bXXVKFCBa1Zs8Zl7IABA+Tp6amtW7cqJSVFLVu2lCQ9+eSTzrewZs6c6XZNK1as0J133ilfX1/5+/urS5cu2rFjh0ufPn36yM/PT4cPH1a3bt3k5+en4OBgvfDCC8rNzXXpe/z4cT3xxBMKCAhQ5cqV1bt3b23dutWlvj59+uj999+X5Pr23O9NnTpVt912m+x2u1q2bKkNGzYUe7vOnDmjp59+WlWqVFFAQIDi4+NdXufevXvr1ltv1fnz5/ON7dixo+rXr1/k+vfs2aOHHnpIISEh8vLyUq1atfToo4/q5MmTLv3mzJmj6OhoeXt765ZbbtGjjz6qgwcPuvS566671LhxY/3www9q166dfHx8VLNmTb399tvOPlf6mf/+mpnLrz16//339Yc//EE+Pj7q2LGjDh48KGOMRo4cqVq1asnb21tdu3bVr7/+mm87S2v/OHDggIKDgyVJiYmJzvo5M4frhgGQz6BBg8zv/3n069fPeHh4mP79+5vJkyebl19+2fj6+pqWLVuac+fOGWOMOXfunGnevLkJCwsz2dnZxhhjPv/8cyPJjBw50hhjTGZmpnn99deNJDNgwAAze/ZsM3v2bLN3795C65kxY4aRZPbv3+9smzVrlrHZbKZTp07mvffeM6NHjzZ16tQxlStXdunXu3dv4+XlZRo1amSeeuopM2nSJPPQQw8ZSeaDDz5w9svNzTUxMTGmYsWKZvDgwWbixImmQ4cOpmnTpkaSmTFjhjHGmNTUVNOhQwcjyVn77NmzjTHG7N+/30gyzZs3NxEREWb06NHm7bffNrfeequpVauW83W60nZGRUWZO++807z77rtm0KBBpkKFCuZPf/qTycvLM8YYk5ycbCSZf/3rXy7jMzIyTMWKFc3rr79e6BwOh8OEh4ebGjVqmDfeeMNMnz7dJCYmmpYtW5oDBw44+73xxhvGZrOZHj16mA8++MAkJiaaW2+91dSpU8dkZWU5+7Vt29bUqFHDhIaGmqFDh5oPPvjA3H333UaSWb58uTHmyj/z3r17m7CwMOc6L72OzZo1Mw0bNjRjx441r776qvH09DStW7c2r7zyiomNjTXvvvuuGTJkiLHZbObJJ5902c7S3D9ycnLMpEmTjCTzwAMPOOvfunVrkT9P4FohzAAF+H2Y+fe//20kmblz57r0uxRULm/ftm2b8fT0NP369TNZWVmmZs2a5vbbbzfnz5939tmwYYNLQLiS34eZU6dOmcqVK5v+/fu79MvMzDSBgYEu7b179zaS8v2Cb968uYmOjnYuL1y40Egy48ePd7bl5uY6fzFfXmtBYc+Y//4SrlKlivn111+d7UuWLCkwfBS2ndHR0S7B5+233zaSzJIlS5x11apVy/To0cNl/NixY43NZjP79u0rdI7NmzcbSWbBggWF9jlw4ICpWLGiefPNN13at23bZjw8PFza27ZtaySZWbNmOdscDocJCQkxDz30kLOtqJ95YWEmODjYnDhxwtmekJBgJJmmTZu67E89e/Y0np6e5uzZs8aYstk/fv75ZyPJvPbaawW9ZEC54m0moBgWLFigwMBAdejQQb/88ovzER0dLT8/P61du9bZt3HjxkpMTNT06dMVFxenX375RR9++KE8PErv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M2fOVOXKlfO1b9iwQQMGDLimtcAartX+e+DAAdlsNm3ZsqXU1ombx6X91GazydPTUxEREXr99dd14cKFq1pvbGysMjIynF/sxjG0fBBmrhNeXl4aPXq0srKyyruUAgUHB8vHx6e8y8B16nraf8+dO1feJeA61alTJ2VkZGjPnj16/vnnNWLECL3zzjtXtU5PT0+FhIRcMbhzDC1bhJnrRPv27RUSEqKkpKRC+3z11Ve688475e3trdDQUA0ZMkSnT592Pp+RkaEuXbrI29tb4eHhmjdvXr5Tm2PHjlVUVJR8fX0VGhqqv/zlL8rJyZF08XTpk08+qZMnTzr/ghkxYoQk11Okjz32mHr06OFS2/nz53Xrrbdq1qxZki7eTyspKUnh4eHy9vZW06ZN9cknn5TCK4XrUWnsvzabTYsXL3YZU7lyZc2cOVOSFB4eLklq3ry5bDab7rrrLkkX/+Lu1q2b3nzzTdWoUUP169eXJM2ePVu33367/P39FRISoscee0zHjh0rvY2G5djtdoWEhCgsLEzPPPOM2rdvr6VLlyorK0vx8fEKCgqSj4+POnfurD179jjH/fTTT7r//vsVFBQkX19fNWrUSMuXL5fk+jYTx9DyQ5i5TlSsWFGjRo3Se++9p0OHDuV7fu/everUqZMeeughff/99/roo4/01VdfafDgwc4+8fHxOnLkiFJSUrRw4UJNnTo138G7QoUKevfdd7Vjxw59+OGH+uKLL/TSSy9Juni6dPz48QoICFBGRoYyMjL0wgsv5KulV69e+te//uUMQZK0cuVKnTlzRg888IAkKSkpSbNmzdLkyZO1Y8cOPffcc3r88ce1bt26Unm9cH0pjf33Sr799ltJ0urVq5WRkaFPP/3U+dyaNWu0a9cuJScna9myZZIu/nIYOXKktm7dqsWLF+vAgQPq06fP1W0obije3t46d+6c+vTpo40bN2rp0qVav369jDG69957df78eUnSoEGD5HA49OWXX2rbtm0aPXq0/Pz88q2PY2g5Mih3vXv3Nl27djXGGNO6dWvz1FNPGWOMWbRokbn0I+rbt68ZMGCAy7h///vfpkKFCua3334zP/74o5FkNmzY4Hx+z549RpIZN25coXMvWLDAVKlSxbk8Y8YMExgYmK9fWFiYcz3nz583t956q5k1a5bz+Z49e5oePXoYY4w5e/as8fHxMampqS7r6Nu3r+nZs2fRLwYspzT2X2OMkWQWLVrk0icwMNDMmDHDGGPM/v37jSSzefPmfPNXq1bNOByOIuvcsGGDkWROnTpljDFm7dq1RpLJyspyc4thRZfvp3l5eSY5OdnY7XbTrVs3I8l8/fXXzr6//PKL8fb2Nh9//LExxpioqCgzYsSIAtf7+/2IY2j5sMRds28mo0eP1t13350vzW/dulXff/+95s6d62wzxigvL0/79+/X7t275eHhoRYtWjifj4iIUFBQkMt6Vq9eraSkJO3cuVPZ2dm6cOGCzp49qzNnzhT7/VwPDw898sgjmjt3rp544gmdPn1aS5Ys0fz58yVJaWlpOnPmjDp06OAy7ty5c2revLlbrwespaT7b4MGDa5q3qioKHl6erq0bdq0SSNGjNDWrVuVlZWlvLw8SVJ6eroaNmx4VfPBmpYtWyY/Pz+dP39eeXl5euyxx/Tggw9q2bJlatWqlbNflSpVVL9+ff3444+SpCFDhuiZZ57RqlWr1L59ez300ENq0qRJievgGFr6CDPXmT/96U+Ki4tTQkKCyynxnJwcPf300xoyZEi+MbVr19bu3buvuO4DBw7ovvvu0zPPPKM333xTt9xyi7766iv17dtX586dc+vitF69eqlt27Y6duyYkpOT5e3trU6dOjlrlaTPPvtMNWvWdBnHfUtubCXdf6WL18yY391d5dJp/ivx9fV1WT59+rTi4uIUFxenuXPnKjg4WOnp6YqLi+MC4ZtYu3btNGnSJHl6eqpGjRry8PDQ0qVLrziuX79+iouL02effaZVq1YpKSlJY8aM0bPPPlviWjiGli7CzHXorbfeUrNmzZwXMkpSixYt9MMPPygiIqLAMfXr19eFCxe0efNmRUdHS7qY7i//dMmmTZuUl5enMWPGqEKFi5dLffzxxy7r8fT0VG5u7hVrjI2NVWhoqD766COtWLFC3bt3V6VKlSRJDRs2lN1uV3p6utq2bevexsPySrL/Shc/7ZGRkeFc3rNnj86cOeNcvnTmpTj7586dO3X8+HG99dZbCg0NlSRt3LjR7W3BjcXX1zffPtigQQNduHBB//nPfxQbGytJOn78uHbt2uVyBi80NFQDBw7UwIEDlZCQoGnTphUYZjiGlg/CzHUoKipKvXr10rvvvutse/nll9W6dWsNHjxY/fr1k6+vr3744QclJydr4sSJioyMVPv27TVgwABNmjRJlSpV0vPPPy9vb2/nRwYjIiJ0/vx5vffee7r//vv19ddfa/LkyS5z16lTRzk5OVqzZo2aNm0qHx+fQs/YPPbYY5o8ebJ2796ttWvXOtv9/f31wgsv6LnnnlNeXp7uuOMOnTx5Ul9//bUCAgLUu3fvMnjVcL0oyf4rSXfffbcmTpyomJgY5ebm6uWXX3Ye3CWpatWq8vb21ueff65atWrJy8vL+d0ev1e7dm15enrqvffe08CBA7V9+3aNHDmybDccllS3bl117dpV/fv315QpU+Tv76+//vWvqlmzprp27SpJGjZsmDp37qx69eopKytLa9euLfStUY6h5aScr9mBcb0w7ZL9+/cbT09Pc/mP6NtvvzUdOnQwfn5+xtfX1zRp0sS8+eabzuePHDliOnfubOx2uwkLCzPz5s0zVatWNZMnT3b2GTt2rKlevbrx9vY2cXFxZtasWfkughw4cKCpUqWKkWRee+01Y4zrxWuX/PDDD0aSCQsLM3l5eS7P5eXlmfHjx5v69eubSpUqmeDgYBMXF2fWrVt3dS8Wrjultf8ePnzYdOzY0fj6+pq6deua5cuXu1wAbIwx06ZNM6GhoaZChQqmbdu2hc5vjDHz5s0zderUMXa73cTExJilS5e6XEDMBcA3l8L2E2OM+fXXX80TTzxhAgMDncfG3bt3O58fPHiwue2224zdbjfBwcHmiSeeML/88osxpuD9iGPotWcz5ndvUuOGcejQIYWGhmr16tW65557yrscAADKBGHmBvLFF18oJydHUVFRysjI0EsvvaTDhw9r9+7dLqfrAQC4kXDNzA3k/PnzeuWVV7Rv3z75+/srNjZWc+fOJcgAAG5onJkBAACWxu0MAACApRFmAACApRFmAACApRFmAACApRFmAACApRFmAFxX6tSpo/Hjx5d3GQAshDADoFzMnDlTlStXzte+YcMGDRgw4NoX9DspKSmy2Ww6ceJEeZcC4Ar40jwA15Xg4ODyLgGAxXBmBkChPvnkE0VFRcnb21tVqlRR+/btdfr0aUnS9OnT1aBBA3l5eSkyMlIffPCBc9yBAwdks9n06aefql27dvLx8VHTpk21fv16SRfPejz55JM6efKkbDabbDabRowYISn/20w2m01TpkzRfffdJx8fHzVo0EDr169XWlqa7rrrLvn6+io2NlZ79+51qX3JkiVq0aKFvLy89Ic//EGJiYm6cOGCy3qnT5+uBx54QD4+Pqpbt66WLl3qrL9du3aSpKCgINlsNvXp06e0X14ApaU873IJ4Pp15MgR4+HhYcaOHWv2799vvv/+e/P++++bU6dOmTlz5pjq1aubhQsXmn379pmFCxeaW265xcycOdMYc/Gu2ZJMZGSkWbZsmdm1a5d5+OGHTVhYmDl//rxxOBxm/PjxJiAgwGRkZJiMjAxz6tQpY0z+uwtLMjVr1jQfffSR2bVrl+nWrZupU6eOufvuu83nn39ufvjhB9O6dWvTqVMn55gvv/zSBAQEmJkzZ5q9e/eaVatWmTp16pgRI0a4rLdWrVpm3rx5Zs+ePWbIkCHGz8/PHD9+3Fy4cMEsXLjQSDK7du0yGRkZ5sSJE9fmhQfgNsIMgAJt2rTJSDIHDhzI99xtt91m5s2b59I2cuRIExMTY4z5b5iZPn268/kdO3YYSebHH380xhgzY8YMExgYmG/dBYWZV1991bm8fv16I8n8/e9/d7b985//NF5eXs7le+65x4waNcplvbNnzzbVq1cvdL05OTlGklmxYoUxxpi1a9caSSYrKytfjQCuL1wzA6BATZs21T333KOoqCjFxcWpY8eOevjhh+Xp6am9e/eqb9++6t+/v7P/hQsXFBgY6LKOJk2aOP+/evXqkqRjx44pMjLSrVouX0+1atUkSVFRUS5tZ8+eVXZ2tgICArR161Z9/fXXevPNN519cnNzdfbsWZ05c0Y+Pj751uvr66uAgAAdO3bMrdoAlD/CDIACVaxYUcnJyUpNTdWqVav03nvv6X/+53/0r3/9S5I0bdo0tWrVKt+Yy11+x3abzSZJysvLc7uWgtZT1LpzcnKUmJioBx98MN+6vLy8ClzvpfWUpD4A5YswA6BQNptNbdq0UZs2bfR///d/CgsL09dff60aNWpo37596tWrV4nX7enpqdzc3FKs9r9atGihXbt2KSIiosTr8PT0lKQyqxFA6SHMACjQf/7zH61Zs0YdO3ZU1apV9Z///Ec///yzGjRooMTERA0ZMkSBgYHq1KmTHA6HNm7cqKysLA0fPrxY669Tp45ycnK0Zs0aNW3aVD4+Ps63f67W//3f/+m+++5T7dq19fDDD6tChQraunWrtm/frjfeeKNY6wgLC5PNZtOyZct07733ytvbW35+fqVSH4DSxUezARQoICBAX375pe69917Vq1dPr776qsaMGaPOnTurX79+mj59umbMmKGoqCi1bdtWM2fOVHh4eLHXHxsbq4EDB6pHjx4KDg7W22+/XWq1x8XFadmyZVq1apVatmyp1q1ba9y4cQoLCyv2OmrWrKnExET99a9/VbVq1TR48OBSqw9A6bIZY0x5FwEAAFBSnJkBAACWRpgBAACWRpgBAACWRpgBAACWRpgBAACWRpgBAACWRpgBAACWRpgBAACWRpgBAACWRpgBAACWRpgBAACW9v8A75yYHCw2Or8AAAAASUVORK5CYII=\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Cell 5\n",
        "X = df['clean_text']\n",
        "y = df['sentiment']\n",
        "X_train, X_test, y_train, y_test = train_test_split(\n",
        "    X, y, test_size=0.2, stratify=y, random_state=42\n",
        ")\n",
        "print(\"Train:\", len(X_train), \"Test:\", len(X_test))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "EvD3tDEcO045",
        "outputId": "b651e30f-aa8a-4088-e9d2-0d791cd89b49"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Train: 799 Test: 200\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Cell 6\n",
        "def eval_and_print(name, y_true, y_pred, labels=None):\n",
        "    print(f\"=== {name} ===\")\n",
        "    print(\"Accuracy:\", accuracy_score(y_true, y_pred))\n",
        "    print(classification_report(y_true, y_pred))\n",
        "    cm = confusion_matrix(y_true, y_pred, labels=labels)\n",
        "    sns.heatmap(cm, annot=True, fmt='d', cmap='Blues',\n",
        "                xticklabels=labels, yticklabels=labels)\n",
        "    plt.xlabel(\"Predicted\"); plt.ylabel(\"Actual\")\n",
        "    plt.title(f\"Confusion Matrix: {name}\")\n",
        "    plt.show()\n"
      ],
      "metadata": {
        "id": "CR7rjwvUO8G3"
      },
      "execution_count": 9,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Cell 7: TF-IDF + LogisticRegression pipeline\n",
        "tfidf = TfidfVectorizer(max_features=10000, ngram_range=(1,2))\n",
        "\n",
        "pipeline_lr = Pipeline([\n",
        "    ('tfidf', tfidf),\n",
        "    ('clf', LogisticRegression(max_iter=500, solver='saga', random_state=42))\n",
        "])\n",
        "\n",
        "pipeline_lr.fit(X_train, y_train)\n",
        "y_pred_lr = pipeline_lr.predict(X_test)\n",
        "eval_and_print(\"Logistic Regression (TF-IDF)\", y_test, y_pred_lr, labels=['Positive','Neutral','Negative'])\n",
        "\n",
        "# save\n",
        "joblib.dump(pipeline_lr, \"model_logistic_tfidf.joblib\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 698
        },
        "id": "Sf-sIMnfPBkC",
        "outputId": "b425aade-9584-4bed-a540-42b8da3f9121"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "=== Logistic Regression (TF-IDF) ===\n",
            "Accuracy: 1.0\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "    Negative       1.00      1.00      1.00        66\n",
            "     Neutral       1.00      1.00      1.00        67\n",
            "    Positive       1.00      1.00      1.00        67\n",
            "\n",
            "    accuracy                           1.00       200\n",
            "   macro avg       1.00      1.00      1.00       200\n",
            "weighted avg       1.00      1.00      1.00       200\n",
            "\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['model_logistic_tfidf.joblib']"
            ]
          },
          "metadata": {},
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Cell 8: Naive Bayes pipeline\n",
        "pipeline_nb = Pipeline([\n",
        "    ('tfidf', TfidfVectorizer(max_features=10000)),\n",
        "    ('clf', MultinomialNB())\n",
        "])\n",
        "pipeline_nb.fit(X_train, y_train)\n",
        "y_pred_nb = pipeline_nb.predict(X_test)\n",
        "eval_and_print(\"MultinomialNB (TF-IDF)\", y_test, y_pred_nb, labels=['Positive','Neutral','Negative'])\n",
        "joblib.dump(pipeline_nb, \"model_nb_tfidf.joblib\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 698
        },
        "id": "RaaEvSvEPD-j",
        "outputId": "dcc532f4-8da2-4bf1-8d80-17c028c553a3"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "=== MultinomialNB (TF-IDF) ===\n",
            "Accuracy: 1.0\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "    Negative       1.00      1.00      1.00        66\n",
            "     Neutral       1.00      1.00      1.00        67\n",
            "    Positive       1.00      1.00      1.00        67\n",
            "\n",
            "    accuracy                           1.00       200\n",
            "   macro avg       1.00      1.00      1.00       200\n",
            "weighted avg       1.00      1.00      1.00       200\n",
            "\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['model_nb_tfidf.joblib']"
            ]
          },
          "metadata": {},
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Cell 9: RandomForest (TF-IDF -> RF)\n",
        "pipeline_rf = Pipeline([\n",
        "    ('tfidf', TfidfVectorizer(max_features=5000)),\n",
        "    ('clf', RandomForestClassifier(n_estimators=200, random_state=42, n_jobs=-1))\n",
        "])\n",
        "pipeline_rf.fit(X_train, y_train)\n",
        "y_pred_rf = pipeline_rf.predict(X_test)\n",
        "eval_and_print(\"RandomForest (TF-IDF)\", y_test, y_pred_rf, labels=['Positive','Neutral','Negative'])\n",
        "joblib.dump(pipeline_rf, \"model_rf_tfidf.joblib\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 698
        },
        "id": "jwNGXDd7PJoH",
        "outputId": "53b9abf4-a0d4-4936-b1fd-7d2ca94a53a0"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "=== RandomForest (TF-IDF) ===\n",
            "Accuracy: 1.0\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "    Negative       1.00      1.00      1.00        66\n",
            "     Neutral       1.00      1.00      1.00        67\n",
            "    Positive       1.00      1.00      1.00        67\n",
            "\n",
            "    accuracy                           1.00       200\n",
            "   macro avg       1.00      1.00      1.00       200\n",
            "weighted avg       1.00      1.00      1.00       200\n",
            "\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "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NoiIiEhtepxHsGuDiIiI1McWCSIiIi1j1wYRERGpTY/zCHZtEBERkfrYIkFERKRl7NogIiIitelxHsFEgoiISNv0uUWCYySIiIhIbXrZIpF6ZonYIZCOsWk6VuwQSIfwO4LKmx43SOhnIkFERKRL2LVBREREVAy2SBAREWmZHjdIMJEgIiLSNnZtEBERERWDLRJERERapscNEkwkiIiItI1dG0RERETFYIsEERGRlulziwQTCSIiIi3T4zyCiQQREZG26XOLBMdIEBERkdrYIkFERKRletwgwUSCiIhI29i1QURERFQMtkgQERFpmR43SDCRICIi0jYDPc4k2LVBREREamOLBBERkZbpcYMEEwkiIiJt0+dZG0wkiIiItMxAf/MIjpEgIiJ6H8yePRsSiQQTJkyQl2VnZ2PMmDGws7ODubk5AgMD8eDBA5XqZSJBRESkZRKJRCOLus6cOYOff/4Z9evXVygPDg7Gjh07sGnTJhw7dgxJSUno1auXSnUzkSAiItIyiUQzizoyMzMxYMAArFixAjY2NvLy9PR0rFy5EvPmzUO7du3g5eWFqKgonDx5EqdOnSp1/UwkiIiI3hE5OTnIyMhQWHJyct64z5gxY9C1a1f4+fkplJ87dw55eXkK5XXr1kWNGjUQGxtb6piYSBAREWmZREP/IiIiYGVlpbBERESUeNz169fj/PnzxW6TkpICY2NjWFtbK5RXrlwZKSkppT43ztogIiLSMk3N2ggNDUVISIhCmVQqLXbb//77D1988QUOHDgAExMTzQRQDCYSRERE7wipVFpi4vC6c+fO4eHDh2jcuLG8rKCgAMePH8eSJUuwb98+5ObmIi0tTaFV4sGDB3BwcCh1TEwkiIiItEyMG1K1b98ely5dUigbMmQI6tati8mTJ6N69eowMjLCoUOHEBgYCACIj49HYmIivL29S30cJhJERERaJsaNLS0sLFCvXj2FMjMzM9jZ2cnLhw0bhpCQENja2sLS0hLjxo2Dt7c3mjdvXurjMJEgIiJ6T82fPx8GBgYIDAxETk4O/P39sXTpUpXqkAiCIGgpPtFk54sdAekam6ZjxQ6BdEjqmSVih0A6xKQc/qTutfKcRurZOsxLI/VoElskiIiItEyPn9nFRIKIiEjb9Pnpn7whFREREamNLRJERERapscNEkwkiIiItM1AjzMJdm0Q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\n"
          },
          "metadata": {}
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['model_rf_tfidf.joblib']"
            ]
          },
          "metadata": {},
          "execution_count": 12
        }
      ]
    }
  ]
}